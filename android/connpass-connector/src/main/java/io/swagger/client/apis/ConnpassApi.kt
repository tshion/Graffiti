/**
 * connpass API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: (see docs)
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.GetEventResponse

import io.swagger.client.infrastructure.*

class ConnpassApi(basePath: kotlin.String = "https://connpass.com/api") : ApiClient(basePath) {

    /**
     * イベントサーチAPI
     * 
     * @param eventId イベントID (optional)
     * @param keyword キーワード (AND) (optional)
     * @param keywordOr キーワード (OR) (optional)
     * @param ym イベント開催年月 (optional)
     * @param ymd イベント開催年月日 (optional)
     * @param nickname 参加者のニックネーム (optional)
     * @param ownerNickname 管理者のニックネーム (optional)
     * @param seriesId グループID (optional)
     * @param start 検索の開始位置 (optional, default to 1)
     * @param order 検索結果の表示順 (optional, default to 1)
     * @param count 取得件数 (optional, default to 10)
     * @param format レスポンス形式 (optional, default to json)
     * @return GetEventResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun v1EventGet(eventId: kotlin.Array<kotlin.Int>? = null, keyword: kotlin.Array<kotlin.String>? = null, keywordOr: kotlin.Array<kotlin.String>? = null, ym: kotlin.Array<kotlin.String>? = null, ymd: kotlin.Array<kotlin.String>? = null, nickname: kotlin.Array<kotlin.String>? = null, ownerNickname: kotlin.Array<kotlin.String>? = null, seriesId: kotlin.Array<kotlin.Int>? = null, start: kotlin.Int? = null, order: java.math.BigDecimal? = null, count: kotlin.Int? = null, format: kotlin.String? = null): GetEventResponse {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (eventId != null) {
                put("event_id", toMultiValue(eventId.toList(), "csv"))
            }
            if (keyword != null) {
                put("keyword", toMultiValue(keyword.toList(), "csv"))
            }
            if (keywordOr != null) {
                put("keyword_or", toMultiValue(keywordOr.toList(), "csv"))
            }
            if (ym != null) {
                put("ym", toMultiValue(ym.toList(), "csv"))
            }
            if (ymd != null) {
                put("ymd", toMultiValue(ymd.toList(), "csv"))
            }
            if (nickname != null) {
                put("nickname", toMultiValue(nickname.toList(), "csv"))
            }
            if (ownerNickname != null) {
                put("owner_nickname", toMultiValue(ownerNickname.toList(), "csv"))
            }
            if (seriesId != null) {
                put("series_id", toMultiValue(seriesId.toList(), "csv"))
            }
            if (start != null) {
                put("start", listOf(start.toString()))
            }
            if (order != null) {
                put("order", listOf(order.toString()))
            }
            if (count != null) {
                put("count", listOf(count.toString()))
            }
            if (format != null) {
                put("format", listOf(format.toString()))
            }
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/event", query = localVariableQuery
        )
        val response = request<GetEventResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GetEventResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
